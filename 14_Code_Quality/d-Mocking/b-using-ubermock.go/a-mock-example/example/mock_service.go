// Code generated by MockGen. DO NOT EDIT.
// Source: example/service.go
//
// Generated by this command:
//
//	mockgen -source=example/service.go -destination=example/mock_service.go -package=example
//

// Package example is a generated GoMock package.
package example

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockService) Add(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockServiceMockRecorder) Add(a, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockService)(nil).Add), a, b)
}

// Multiply mocks base method.
func (m *MockService) Multiply(a, b int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Multiply", a, b)
	ret0, _ := ret[0].(int)
	return ret0
}

// Multiply indicates an expected call of Multiply.
func (mr *MockServiceMockRecorder) Multiply(a, b any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Multiply", reflect.TypeOf((*MockService)(nil).Multiply), a, b)
}
